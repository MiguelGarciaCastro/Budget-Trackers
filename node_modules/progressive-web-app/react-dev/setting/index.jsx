import React, {Component} from 'react';
import Spinner from 'react-svg-spinner';

import {ajax_request} from 'nodereactor/react';
import {displays, orientations} from '../resources/data';
import {Icon} from './icon';

import './style.scss';

const Input=(props)=>
{
    let {
            name, 
            title, 
            type="text",
            onChange,
            hint,
            required=true,
            disabled=false,

            values=[],
            default_v=''
        }=props;

    return <div className="addon_input">
        <label><b>{title} {required ? '*' : null}</b></label>
        {hint ? <small><i>{hint}</i></small> : null}
        
        {type=='text' ? <input className="form-control" name={name} type="text" onChange={onChange} defaultValue={default_v} disabled={disabled}/> : null}
        
        {type=='color' ? <input className="form-control" name={name} type="color" onChange={onChange} defaultValue={default_v}/> : null}

        {type=='icon' ? <Icon name={name} onChange={onChange} default_v={default_v}/> : null}
        
        {
            type!=='radio' ? null :
            <form>
               {
                   values.map(item=>
                    {
                        if(!default_v){default_v='';}

                        let ttl=item;

                        item=item.toLowerCase();
                        default_v=default_v.toLowerCase();

                        let for_id=Math.random().toString(7);

                        return <span className="nr_pwa_radio_container" key={item}>
                            <input 
                                id={for_id}
                                type="radio" 
                                name={name} 
                                value={item} 
                                defaultChecked={item==default_v}
                                onChange={onChange}/> 
                            &nbsp;
                            <label htmlFor={for_id}>{ttl}</label>
                        </span>
                    })
                } 
            </form>
        }
    </div>
}

class Dashboard extends Component
{
    constructor(props)
    {
        super(props);

        this.state=
        {
            'fetching':true,
            'submitting':false,
            'values':{}
        }

        
        this.pack_fields=
        {
            'short_name'        :   {'title':'Short Name'},
            'name'              :   {'title':'Name'},
            'start_url'         :   {'title':'Start URL'},
            'display'           :   {'title':'Display', 'type':'radio', 'values':displays},
            'orientation'       :   {'title':'Orientation', 'type':'radio', 'values':orientations},
            'theme_color'       :   {'title':'Theme Color', 'type':'color'},
            'background_color'  :   {'title':'Background Color', 'type':'color'},
            'icon'              :   {'title':'Icon', 'type':'icon'}
        };

        this.getVal=this.getVal.bind(this);
        this.savePwa=this.savePwa.bind(this);
    }

    getVal(e, val)
    {
        let {values}=this.state;

        if(typeof val=='object')
        {
            values=Object.assign(values, val);
        }
        else
        {
            let el=e.currentTarget;

            if(el.type=='radio' && !el.checked)
            {
                return;
            }

            values[el.name]=el.value;
        }
        
        this.setState({values});
    }

    verifyValues()
    {
        let {values}=this.state;

        let fields=this.pack_fields;

        for(let k in fields)
        {
            if(k=='icon' && values.icon_url){continue;}

            if(!values[k] || (typeof values[k]=='string' && /\S+/.test(values[k])==false))
            {
                alert(fields[k].title+' is Required');
                return false;
            }
        }

        return true;
    }

    savePwa()
    {
        if(!this.verifyValues()){return false;}

        let {values}=this.state;

        let data=new FormData();

        Object.keys(values).forEach(key=>
        {
            key=='icon' ? data.append(key, values[key], values[key].name) : data.append(key, values[key]);
        });

        this.setState({submitting:true});
        ajax_request('nr_pwa_save_manifest', data, (r, rq, e)=>
        {
            this.setState({submitting:false});
        });

        return false;
    }

    componentDidMount()
    {
        ajax_request('nr_pwa_get_manifest_file', (r,e)=>
        {
            let {manifest={}}=r;
            this.setState({values:manifest, fetching:false});
        });
    }

    render()
    {
        let {values={}, fetching, submitting}=this.state;

        let fields=this.pack_fields;

        let sprops=
        {
            "text":"Install",
            "button_class":""
        }

        return fetching ? <Spinner size="15px"/> : 
        <div id="nr_pwa_setting_page_container">
            <h3>Progressive Web App</h3>

            {
                Object.keys(fields).map(key=>
                {
                    let ob=fields[key];

                    let default_v = key=='icon' ? values.icon_url : values[key];

                    key=='start_url' ? default_v='.' : 0;

                    return <Input 
                                {...ob} 
                                key={key} 
                                name={key} 
                                onChange={this.getVal}
                                default_v={default_v}/>
                })
            }

            <div className="text-right">
                <button className="btn btn-primary btn-sm" onClick={this.savePwa} disabled={submitting} title="Manifest will be updated in both of public and build folder.">
                    Save {submitting ? <span>&nbsp; <Spinner size="15px"/></span> : null}
                </button>
            </div>

            <hr/>
            <h4>PWA Installer ShortCode</h4>
            <p>[Installer package=progressive-web-app properties={JSON.stringify(sprops)}]</p>
            <hr/>
            <i>
                PWA Installer Functionalities will not work in React dev server. <br/> 
                Currently it's for static build mode through NR backend server.
            </i>
        </div>
    }
}

export {Dashboard}